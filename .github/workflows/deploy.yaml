name: Deploy to AWS Lambda

on:
  push:
    branches:
      - dev
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -t python
          # Remove unnecessary files
          find python -name "*.dist-info" -type d -exec rm -rf {} +
          find python -name "*.egg-info" -type d -exec rm -rf {} +
          find python -name "tests" -type d -exec rm -rf {} +
          find python -name "__pycache__" -type d -exec rm -rf {} +

      - name: Package dependencies into Lambda Layer
        run: |
          cd python
          zip -r ../dependencies_layer.zip .
        working-directory: .

      - name: Package Lambda function
        run: |
          zip -r lambda_function.zip lambda_function.py

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Publish Lambda Layer
        id: publish_layer
        run: |
          LAYER_VERSION=$(aws lambda publish-layer-version --layer-name et-forecast-dependencies --zip-file fileb://dependencies_layer.zip --query Version --output text)
          echo "Layer version: $LAYER_VERSION"
          echo "::set-output name=layer_version::$LAYER_VERSION"

      - name: Deploy Lambda function
        run: |
          aws lambda update-function-code --function-name et_forecast_func_test --zip-file fileb://lambda_function.zip
          LAYER_ARN=arn:aws:lambda:us-east-2:${{ secrets.AWS_ACCOUNT_ID }}:layer:et-forecast-dependencies:${{ steps.publish_layer.outputs.layer_version }}
          echo "Using Layer ARN: $LAYER_ARN"
          echo "Waiting for function update to complete..."
          while true; do
            STATUS=$(aws lambda get-function-configuration --function-name et_forecast_func_test --query 'LastUpdateStatus' --output text)
            if [ "$STATUS" == "Successful" ] || [ "$STATUS" == "Failed" ]; then
              break
            fi
            echo "Current status: $STATUS. Waiting..."
            sleep 10
          done
          aws lambda update-function-configuration --function-name et_forecast_func_test --layers $LAYER_ARN
        if: github.ref == 'refs/heads/dev'
